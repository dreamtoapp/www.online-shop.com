# ðŸš¨ Very Important: Safe Component Removal & Backup Rule

Whenever a component or file is no longer needed but might be required for future reference:

- **DO NOT delete the file immediately.**
- **Instead, rename the file extension from `.tsx` (or `.ts`, `.js`, etc.) to `.txt`.**
  - Example: `ComponentName.tsx` â†’ `ComponentName.txt`
- This disables the file as a component but keeps a backup in the codebase for easy restoration or review.
- Only delete the `.txt` backup after a thorough review and confirmation that it is no longer needed.

**This ensures:**
- No accidental loss of important code.
- Easy rollback if a feature or logic is needed again.
- Clear traceability and safer refactoring.

1. **Function Structure**  
   âœ… Split into focused functions (1 task = 1 function)  
   âœ… Max 30 lines per function  
   âœ… No nested promise chains  
   âœ… No single-letter variables (e.g., `user` not `u`)  
   âœ… Independent `await` calls wrapped in `Promise.all`  
   âœ… No sequential awaits for unrelated operations  
   âœ… Try/catch in parent functions 
   âœ… Try/catch in throw error with clean and clear  msg i display it in ui human readable
   
   âœ… Consistent error format (`{ success, data, error }`)  
   âœ… Contextual error messages ("Failed to load orders" not "Error")  
   âœ… Repeated logic extracted to utils/helpers  
   âœ… No copy-pasted code blocks (>2 duplicates)  
   âœ… No `any` types  
   âœ… Interfaces for complex objects  
   âœ… Zod/data validation in API boundaries  
   âœ… `forEach` replaced with `map`/`filter`/`reduce`  
   âœ… No side effects in data transformations  
   âœ… Functions self-document through names  
   âœ… Complex logic has brief inline comments  
   âœ… Consistent indentation (2/4 spaces)  
   âœ… Existing API fields unchanged  
   âœ… New fields marked as optional (`newField?`)  
