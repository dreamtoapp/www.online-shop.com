'use client';

import { useEffect, useState } from 'react';

import dynamic from 'next/dynamic';

import { Product } from '@/types/databaseTypes';;
import uniqeId from '@/utils/uniqeId';

import { fetchPaginatedProducts } from '../../actions/fetchPaginatedProducts';
import ProductSkeleton from '../ProductSkeleton';

// Dynamically import InfiniteScroll with SSR enabled for better initial render
const InfiniteScroll = dynamic(() => import('react-infinite-scroll-component'), {
  ssr: true,
  loading: () => <div className='animate-pulse'>Loading...</div>,
});

// Dynamically import ProductList with SSR enabled
const ProductList = dynamic(() => import('./ProductList'), {
  loading: () => <ProductSkeleton count={4} />,
  ssr: true,
});

interface InfiniteProductListProps {
  initialProducts: Product[];
  initialSlug?: string;
}

export default function InfiniteProductList({
  initialProducts,
  initialSlug = '',
}: InfiniteProductListProps) {
  // Add unique keys to initial products
  const initialProductsWithKeys = initialProducts.map((product) => ({
    ...product,
    _uniqueKey: `${product.id}_${uniqeId()}`,
  }));

  const [products, setProducts] =
    useState<(Product & { _uniqueKey: string })[]>(initialProductsWithKeys);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(2); // Start from page 2 since we already have page 1
  const [slug, setSlug] = useState(initialSlug);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // --- Load More pattern state ---
  const [autoLoadCount, setAutoLoadCount] = useState(0); // Track auto-loads
  const AUTO_LOAD_LIMIT = 3; // Max auto-loads before showing button

  // Reset when slug changes
  useEffect(() => {
    // Add unique keys to new initial products
    const newInitialProductsWithKeys = initialProducts.map((product) => ({
      ...product,
      _uniqueKey: `${product.id}_${uniqeId()}`,
    }));

    setProducts(newInitialProductsWithKeys);
    setPage(2);
    setHasMore(true);
    setSlug(initialSlug);
    setError(null);
  }, [initialSlug, initialProducts]);

  const loadMoreProducts = async (isManual = false) => {
    if (isLoading) return;
    setIsLoading(true);
    setError(null);
    try {
      const newProducts = await fetchPaginatedProducts(page, 20, slug);
      if (!newProducts || newProducts.length === 0) {
        setHasMore(false);
      } else {
        const productsWithUniqueIds = newProducts.map((product) => ({
          ...product,
          _uniqueKey: `${product.id}_${uniqeId()}`,
        }));
        setProducts((prev) => {
          const existingIds = new Set(prev.map((p) => p.id));
          const uniqueNewProducts = productsWithUniqueIds.filter((p) => !existingIds.has(p.id));
          return [...prev, ...uniqueNewProducts];
        });
        setPage((prevPage) => prevPage + 1);
        // Only increment autoLoadCount if not manual (button)
        if (!isManual) setAutoLoadCount((c) => c + 1);
      }
    } catch (error) {
      console.error('Error fetching more products:', error);
      setError('حدث خطأ أثناء تحميل المزيد من المنتجات. يرجى المحاولة مرة أخرى.');
    } finally {
      setIsLoading(false);
    }
  };

  // --- Only auto-load if under limit ---
  const handleNext = () => {
    if (autoLoadCount < AUTO_LOAD_LIMIT) {
      loadMoreProducts();
    }
  };

  return (
    <>
      {/*
      <div style={{position: 'fixed', top: 10, left: '50%', transform: 'translateX(-50%)', background: '#ff0', color: '#000', padding: '6px 18px', borderRadius: 8, fontWeight: 'bold', fontSize: 18, border: '2px solid #333', zIndex: 9999, boxShadow: '0 2px 8px rgba(0,0,0,0.15)'}}>
        autoLoadCount: {autoLoadCount}
      </div>
      */}
      <div className='relative'>
        {/* After 3 auto-loads, show Load More button instead of auto infinite scroll */}
        <InfiniteScroll
          dataLength={products.length}
          next={handleNext}
          hasMore={hasMore}
          loader={<ProductSkeleton count={4} />}
          endMessage={
            <p className='p-4 text-center text-muted-foreground'>لقد شاهدت جميع المنتجات المتاحة</p>
          }
          scrollThreshold={0.8}
          className='min-h-[200px]'
          style={{ overflow: 'hidden' }}
        >
          <ProductList products={products} />
          {/* Error message with retry button */}
          {error && (
            <div className='mt-4 rounded-lg bg-red-50 p-4 text-center dark:bg-red-900/20'>
              <p className='mb-2 text-red-600 dark:text-red-400'>{error}</p>
              <button
                onClick={() => loadMoreProducts(true)}
                className='rounded-md bg-primary px-4 py-2 text-primary-foreground transition-colors hover:bg-primary/90'
                disabled={isLoading}
              >
                {isLoading ? 'جاري المحاولة...' : 'إعادة المحاولة'}
              </button>
            </div>
          )}
          {/* Show Load More button after auto-load limit */}
          {autoLoadCount >= AUTO_LOAD_LIMIT && hasMore && !isLoading && !error && (
            <div className='flex justify-center my-4'>
              <button
                onClick={() => loadMoreProducts(true)}
                className='rounded-md bg-blue-600 px-6 py-2 text-white font-medium shadow hover:bg-blue-700 transition-colors'
              >
                تحميل المزيد من المنتجات
              </button>
            </div>
          )}
        </InfiniteScroll>
      </div>
    </>
  );
}
