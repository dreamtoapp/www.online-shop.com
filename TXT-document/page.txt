import Image from 'next/image'
import Link from 'next/link'

import { Button } from '@/components/ui/button'
import { Product } from '@/types/databaseTypes';
import { Supplier } from '@prisma/client'

import { getCategories } from '../categories/actions/get-categories'
import { getProductsBySupplier } from './actions'
import ProductCard from './components/ProductCard'

interface SimpleCategory {
  id: string
  name: string
}

interface SupplierCardProps {
  supplier: Supplier & { products: Product[] }
}

interface ProductsGridProps {
  products: Product[]
  supplierId: string
}

/** Renders supplier header / info card */
function SupplierCard({ supplier }: SupplierCardProps) {
  return (
    <div className="flex flex-col items-center gap-6 rounded-xl border border-border bg-gradient-to-br from-card to-muted p-6 shadow-lg md:flex-row">
      {/* Logo */}
      <div className="relative h-24 w-24 overflow-hidden rounded-full border-2 border-primary shadow">
        {supplier.logo ? (
          <Image src={supplier.logo} alt={`${supplier.name} logo`} fill className="object-cover object-center" priority />
        ) : (
          <div className="flex h-full w-full items-center justify-center bg-muted">
            <span className="text-muted-foreground">No Logo</span>
          </div>
        )}
      </div>

      {/* Basic Info */}
      <div className="min-w-0 flex-1">
        <h2 className="truncate text-xl font-semibold">{supplier.name}</h2>
        <div className="mt-2 flex flex-wrap gap-2 text-sm text-muted-foreground">
          <span title={supplier.email}><i className="fa fa-envelope mr-1" />{supplier.email}</span>
          <span title={supplier.phone}><i className="fa fa-phone mr-1" />{supplier.phone}</span>
          <span title={supplier.address}><i className="fa fa-map-marker-alt mr-1" />{supplier.address}</span>
        </div>
      </div>

      {/* Actions */}
      <div className="flex flex-col items-end gap-2">
        <Button asChild className="bg-primary text-primary-foreground hover:bg-primary/90">
          <Link href={`/dashboard/products/new?supplierId=${supplier.id}`}>
            إضافة منتج جديد
          </Link>
        </Button>
        <span className="inline-flex items-center rounded-full bg-primary/10 px-3 py-1 text-xs font-bold text-primary">
          {supplier.products.length} منتج
        </span>
      </div>
    </div>
  )
}

/** Table header for grid view */
function ProductsTableHeader() {
  return (
    <div className="hidden w-full grid-cols-[7rem_1fr_1fr_1fr_2fr_7rem] rounded-t-xl border-b border-border bg-muted px-2 py-2 text-sm font-bold text-muted-foreground sm:grid">
      <span className="text-center">الصورة</span>
      <span className="text-center">الاسم</span>
      <span className="text-center">الحجم</span>
      <span className="text-center">السعر</span>
      <span className="text-center">التفاصيل</span>
      <span className="text-center">إجراء</span>
    </div>
  )
}

/** Renders product grid or empty state */
function ProductsGrid({ products, supplierId }: ProductsGridProps) {
  if (products.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <Image src="/empty-box.svg" alt="No products" width={128} height={128} className="mb-4 h-32 w-32 opacity-80" />
        <p className="mb-2 text-lg text-muted-foreground">لا توجد منتجات حتى الآن</p>
        <Button asChild className="bg-primary text-primary-foreground hover:bg-primary/90 mt-4">
          <Link href={`/dashboard/products/new?supplierId=${supplierId}`}>إضافة المنتج الأول</Link>
        </Button>
      </div>
    )
  }

  return (
    <div className="w-full">
      <ProductsTableHeader />
      <div className="flex w-full flex-col">
        {products.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  )
}

// function mapToProduct(raw: any): Product {
//   return {
//     id: raw.id,
//     name: raw.name,
//     slug: raw.slug,
//     type: raw.type,
//     createdAt: raw.createdAt,
//     updatedAt: raw.updatedAt,
//     description: raw.description ?? '',
//     price: raw.price,
//     compareAtPrice: raw.compareAtPrice ?? null,
//     costPrice: raw.costPrice ?? null,
//     productCode: raw.productCode ?? '',
//     outOfStock: raw.outOfStock ?? true,
//     // sku: raw.sku ?? '',
//     // barcode: raw.barcode ?? '',
//     size: raw.size ?? null,
//     details: raw.details ?? null,
//     imageUrl: raw.imageUrl ?? null,
//     images: raw.images ?? [],
//     published: raw.published ?? false,
//     // categoryId: raw.categoryId ?? null,
//     supplierId: raw.supplierId,
//     reviewCount: raw.reviewCount ?? 0,
//     rating: raw.rating ?? 0,
//     tags: raw.tags ?? [],
//   }
// }

export default async function Page({ searchParams }: { searchParams: { [key: string]: string | string[] | undefined } }) {
  const supplierIdParam = searchParams.supplierId
  const supplierId = Array.isArray(supplierIdParam) ? supplierIdParam[0] : supplierIdParam

  const categoriesResult = await getCategories()
  const allCategories: SimpleCategory[] = categoriesResult.success
    ? categoriesResult.categories?.map(c => ({ id: c.id, name: c.name })) || []
    : []

  const supplierResponse = await getProductsBySupplier(supplierId as string)

  if (!supplierId) {
    return (
      <div className="space-y-6 bg-background p-6 text-foreground">
        <h1 className="text-3xl font-bold">خطأ</h1>
        <div className="rounded-lg bg-card p-6 text-center shadow-md">
          <p className="text-destructive">معرف المورد غير صحيح أو مفقود.</p>
        </div>
      </div>
    )
  }

  if (!supplierResponse || !supplierResponse.success || !supplierResponse.data) {
    return (
      <div className="space-y-6 bg-background p-6 text-foreground">
        <h1 className="text-3xl font-bold">حدث خطأ</h1>
        <div className="rounded-lg bg-card p-6 text-center shadow-md">
          <p className="text-destructive">تعذر تحميل بيانات المورد أو المنتجات.</p>
        </div>
      </div>
    )
  }

  const rawSupplier = supplierResponse.data

  const normalizedSupplier: Supplier & { products: Product[] } = {
    id: rawSupplier.id,
    name: rawSupplier.name,
    slug: rawSupplier.slug,
    type: rawSupplier.type,
    createdAt: rawSupplier.createdAt,
    updatedAt: rawSupplier.updatedAt,
    logo: rawSupplier.logo,
    email: rawSupplier.email,
    phone: rawSupplier.phone,
    address: rawSupplier.address,
    // products: rawSupplier.products.map(mapToProduct),
  }

  return (
    <div className="space-y-6 bg-background p-6 text-foreground">
      <h1 className="mb-2 text-3xl font-bold">ادارة المنتجات</h1>
      <SupplierCard supplier={normalizedSupplier} />
      <ProductsGrid products={normalizedSupplier.products} supplierId={normalizedSupplier.id} />
    </div>
  )
}
